[tool.poetry]
name = "pr-validation-system"
version = "1.0.0"
description = "Automated pull request validation system using CrewAI for Azure DevOps"
authors = ["Your Organization <devops@yourorg.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-org/pr-validation-system"
repository = "https://github.com/your-org/pr-validation-system"
documentation = "https://github.com/your-org/pr-validation-system/docs"
keywords = ["validation", "ci/cd", "azure", "devops", "crewai", "ai"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing"
]

[tool.poetry.dependencies]
python = "^3.10"
crewai = "^0.22.5"
crewai-tools = "^0.2.6"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.1"}
pydantic = "^2.6.1"
pydantic-settings = "^2.2.1"
python-dotenv = "^1.0.1"
azure-devops = "^7.1.0b4"
azure-identity = "^1.15.0"
azure-keyvault-secrets = "^4.7.0"
azure-storage-blob = "^12.19.0"
openai = "^1.12.0"
langchain = "^0.1.9"
langchain-openai = "^0.0.8"
tiktoken = "^0.6.0"
sqlalchemy = "^2.0.27"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
redis = "^5.0.1"
httpx = "^0.26.0"
aiofiles = "^23.2.1"
python-multipart = "^0.0.9"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
structlog = "^24.1.0"
prometheus-client = "^0.20.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
pyyaml = "^6.0.1"
python-json-logger = "^2.0.7"
tenacity = "^8.2.3"
cachetools = "^5.3.2"
pytz = "^2024.1"
pandas = "^2.2.0"
numpy = "^1.26.4"
jsonschema = "^4.21.1"
sqlparse = "^0.4.4"
psutil = "^5.9.8"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.1"
pytest-asyncio = "^0.23.5"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx-mock = "^0.25.0"
black = "^24.2.0"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.2"
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.9"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "crewai_tools.*",
    "azure.*",
    "openai.*",
    "langchain.*",
    "redis.*",
    "alembic.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "structlog.*",
    "sqlparse.*",
    "pandas.*",
    "numpy.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/config/*",
    "*/migrations/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
pr-validation = "api.main:main"